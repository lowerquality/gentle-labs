import shutil
import os
import sys


def initializeWith(proto_dir, model_dir, lex_dir):

    if os.path.exists(proto_dir):
        pass
    else:
        os.makedirs(proto_dir)

    lang_path = proto_dir + "/langdir"
    graph_path = proto_dir + "/tdnn_7b_chain_online/graph_pp"
    feats_path = proto_dir + "/feats"

    # 1.deletes all lang related input files that get generated by generateLM.py
    # egs/gentle/data/langdir/*, egs/gentle/data/tdnn../graph../*, if it doesn't exist create it.
    # 2.deletes all feature inputs that get generated on call to automateDecoding.py;
    # empty egs/gentle/data/feats/*, if it doesn't exist create it.
    for path in [lang_path, graph_path, feats_path]:
        if os.path.exists(path):
            shutil.rmtree(path)
        os.makedirs(path)

    # check for final.mdl, tree inside egs/gentle/model/
    # check for lexicon.txt inside egs/gentle/lexicon/
    # if either is not found, raise error
    try:
        if os.path.exists(proto_dir + "/../model"):
            shutil.rmtree(proto_dir + "/../model/")
        os.makedirs(proto_dir + "/../model")
        # else:
        #     os.makedirs(proto_dir + "/../model")
        #     print(
        #         "path: ", proto_dir + "/../model doesn't exist but it is created now!"
        #     )

        if os.path.exists(proto_dir + "/../model/final.mdl") and os.path.exists(
            proto_dir + "/../model/tree"
        ):
            print("Acoustic model files are found: all OK!")
        else:
            print("Searching for final.mdl and tree in {0}".format(model_dir))
            shutil.copy(model_dir + "/final.mdl", proto_dir + "/../model/final.mdl")
            shutil.copy(model_dir + "/tree", proto_dir + "/../model/tree")
            print("Acoustic model files are found: all OK!")

        # copy these files to proto_dir+"/tdnn_7b_chain_online"
        shutil.copy(
            proto_dir + "/../model/final.mdl", proto_dir + "/tdnn_7b_chain_online/"
        )
        shutil.copy(proto_dir + "/../model/tree", proto_dir + "/tdnn_7b_chain_online/")
    except Exception as error:
        print(error)

    try:
        if os.path.exists(proto_dir + "/../lexicon"):
            shutil.rmtree(proto_dir + "/../lexicon")
        os.makedirs(proto_dir + "/../lexicon")
        # else:
        #     os.makedirs(proto_dir + "/../lexicon")
        #     print(
        #         "path: ", proto_dir + "/../lexicon doesn't exist but it is created now!"
        #     )
        if os.path.exists(proto_dir + "/../lexicon/lexicon.txt"):
            print("lexicon is found: all OK!")
        else:
            print("Searching for lexicon in {0}".format(lex_dir))
            shutil.copy(
                lex_dir, proto_dir + "/../lexicon/lexicon.txt"
            )  # lex_dir is the path to lexicon_file not just the lex_dir
            print("lexicon is found: all OK!")

    except Exception as error:
        print(error)


if __name__ == "__main__":
    #  This script takes three arguments..

    # proto_dir is egs/gentle/data, if it doesn't exist, it is created here.
    proto_dir = sys.argv[1]
    model_dir = sys.argv[2]  # dir where final.mdl and tree for the lang are stored
    lex_dir = sys.argv[3]  # path to lexicon for the lang

    initializeWith(proto_dir, model_dir, lex_dir)
